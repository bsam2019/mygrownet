<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Carbon\Carbon;

class Subscription extends Model
{
    use HasFactory;

    protected $table = 'package_subscriptions';

    protected $fillable = [
        'user_id',
        'package_id',
        'amount',
        'status',
        'start_date',
        'end_date',
        'renewal_date',
        'cancelled_at',
        'cancellation_reason',
        'auto_renew',
        'is_trial',
        'trial_days'
    ];

    protected $casts = [
        'amount' => 'decimal:2',
        'start_date' => 'datetime',
        'end_date' => 'datetime',
        'renewal_date' => 'datetime',
        'cancelled_at' => 'datetime',
        'auto_renew' => 'boolean',
        'is_trial' => 'boolean',
        'trial_days' => 'integer'
    ];

    /**
     * Boot method to handle events
     */
    protected static function booted()
    {
        static::created(function ($subscription) {
            if ($subscription->status === 'active') {
                // Process referral commissions for subscription
                if (class_exists(\App\Services\ReferralService::class)) {
                    app(\App\Services\ReferralService::class)->processSubscriptionCommission($subscription);
                }
            }
        });
    }

    /**
     * Get the user that owns the subscription
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * Get the package for this subscription
     */
    public function package(): BelongsTo
    {
        return $this->belongsTo(Package::class);
    }

    /**
     * Get referral commissions generated by this subscription
     */
    public function referralCommissions(): HasMany
    {
        return $this->hasMany(ReferralCommission::class);
    }

    /**
     * Scope for active subscriptions
     */
    public function scopeActive($query)
    {
        return $query->where('status', 'active')
            ->where('end_date', '>', now());
    }

    /**
     * Scope for expired subscriptions
     */
    public function scopeExpired($query)
    {
        return $query->where('status', 'active')
            ->where('end_date', '<=', now());
    }

    /**
     * Scope for expiring soon (within 7 days)
     */
    public function scopeExpiringSoon($query, int $days = 7)
    {
        return $query->where('status', 'active')
            ->whereBetween('end_date', [now(), now()->addDays($days)]);
    }

    /**
     * Check if subscription is active
     */
    public function isActive(): bool
    {
        return $this->status === 'active' && 
               $this->end_date && 
               $this->end_date->isFuture();
    }

    /**
     * Check if subscription is expired
     */
    public function isExpired(): bool
    {
        return $this->end_date && $this->end_date->isPast();
    }

    /**
     * Check if subscription is expiring soon
     */
    public function isExpiringSoon(int $days = 7): bool
    {
        if (!$this->end_date) {
            return false;
        }

        return $this->end_date->isFuture() && 
               $this->end_date->diffInDays(now()) <= $days;
    }

    /**
     * Get days remaining in subscription
     */
    public function daysRemaining(): int
    {
        if (!$this->end_date || $this->end_date->isPast()) {
            return 0;
        }

        return $this->end_date->diffInDays(now());
    }

    /**
     * Renew the subscription
     */
    public function renew(): self
    {
        $this->update([
            'start_date' => now(),
            'end_date' => now()->addMonths($this->package->duration_months),
            'renewal_date' => now()->addMonths($this->package->duration_months),
            'status' => 'active'
        ]);

        return $this;
    }

    /**
     * Cancel the subscription
     */
    public function cancel(string $reason = null): self
    {
        $this->update([
            'status' => 'cancelled',
            'cancelled_at' => now(),
            'cancellation_reason' => $reason,
            'auto_renew' => false
        ]);

        return $this;
    }

    /**
     * Activate the subscription
     */
    public function activate(): self
    {
        $startDate = $this->start_date ?? now();
        $endDate = $startDate->copy()->addMonths($this->package->duration_months);

        $this->update([
            'status' => 'active',
            'start_date' => $startDate,
            'end_date' => $endDate,
            'renewal_date' => $endDate
        ]);

        return $this;
    }

    /**
     * Mark subscription as expired
     */
    public function markAsExpired(): self
    {
        $this->update([
            'status' => 'expired'
        ]);

        return $this;
    }
}
